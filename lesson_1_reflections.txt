How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The command diff was quite usefull for finding the introduced bug
	and made the whole process much easier then I would have performed manually.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Easy access to the entire history would help with rolling back 
	to one of the previous versions in case something wrong has happenned
	with the current one, for instance a typo has occured. It would help 
	spare enormous amount of time when restoring a valid part of programcode

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Among the pros is a possibility to control a commit in flexible way and avoid
	creating  redundant commits. 
	Among the cons is a possibility to miss critical commits and to have some 
	serious irreversable changes that would affect programcode as a consequnce. 
	On contary to the manual commits the automated commits prevent critical code savings from 
	being missed but at the same time they are more likely to save changes redundantly 
	and to make no logical connections among commits.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git works with a set of files refering to it as repository where every change of any element 
	of a repository is trucked. Potentially it is possible due to the ability of Git to control the content of
	a whole workspace and the state of every element in it. 

How can you use the commands git log and git diff to view the history of files?

    I am about to learn how to use git log.
	Using the command diff I could have have the differences between an old and 
	a new versions of files printed out in a terminal console.
	The git log command is used to display all the commits done so far in a chronological order.
	Each section describing a commit contains it's unique id, date it was done and the name of user,
	who commited the changes. In addition there is a title string that usually provides addtional info
	about changes in a from of short description. Up and Down arrow keys are used to navigate across the commits history. 
	The git diff command in conjunction with a couple of commit ids referencing a commit made previously and
	a commit made after respectively shows differncesin in code committed at two time points. The readlines mark
	the elements of code deleted in the latest version and green lines point to the elements added to the last commit.
	

How might using version control make you more confident to make changes that
could break something?

    Version control keeps all the changes made in different commits available so we can 
	always check out and use one of the previous versions in case we have some bugs introduced.
	Navigating throug repository from one commit to an earlier commit we can find the exact commit 
	wher the bug has been introduced without undoing all the job we've progressed in since then.

Now that you have your workspace set up, what do you want to try using Git for?

    I'd like to learn how to create own repositories, how to create brunches, merge them and manage merge conflicts.
	It's also important to learn how to properly synchronize local and server repositories.